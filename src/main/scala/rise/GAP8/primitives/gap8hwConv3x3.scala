// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! //
// This file is automatically generated and should not be changed manually //
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! //
package rise.GAP8.primitives
import rise.core.DSL._
import rise.core.DSL.Type._
import rise.core._
import rise.core.types._
import arithexpr.arithmetic._
object gap8hwConv3x3 extends Builder {
  private final case class Primitive()(override val t: Type = TypePlaceholder) extends rise.core.Primitive {
    override val name: String = "gap8hwConv3x3"
    override def setType(ty: Type): Primitive = Primitive()(ty)
    override def primEq(obj: rise.core.Primitive): Boolean = obj.getClass == getClass
    override def typeScheme: Type = expl { (bias: Nat) => impl { (iw: Nat) => impl { (ih: Nat) => impl { (fw: Nat) => impl { (fh: Nat) => impl { (ow: Nat) => impl { (oh: Nat) => impl { (s: DataType) => ArrayType(ih, ArrayType(iw, s)) ->: ArrayType(fh, ArrayType(fw, s)) ->: ArrayType(oh, ArrayType(ow, s)) } } } } } } } }
  }
  override def toString: String = "gap8hwConv3x3"
  override def primitive: rise.core.Primitive = Primitive()()
  override def apply: ToBeTyped[rise.core.Primitive] = toBeTyped(Primitive()())
  override def unapply(arg: Expr): Boolean = arg match {
    case _: Primitive => true
    case _ => false
  }
}
