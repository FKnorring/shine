// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! //
// This file is automatically generated and should not be changed manually //
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! //
package rise.openCL.primitives
import rise.core.DSL._
import rise.core.DSL.Type._
import rise.core._
import rise.core.types._
import arithexpr.arithmetic._
final case class mapGlobal(dim: Int) extends Builder {
  override def toString: String = "mapGlobal"
  override def primitive: rise.core.Primitive = mapGlobal.Primitive(dim)()
  override def apply: ToBeTyped[rise.core.Primitive] = toBeTyped(mapGlobal.Primitive(dim)())
  override def unapply(arg: Expr): Boolean = arg match {
    case _: Primitive => true
    case _ => false
  }
}
object mapGlobal {
  private final case class Primitive(dim: Int)(override val t: Type = TypePlaceholder) extends rise.core.Primitive {
    override val name: String = "mapGlobal"
    override def setType(ty: Type): Primitive = Primitive(dim)(ty)
    override def typeScheme: Type = impl { (n: Nat) => impl { (s: DataType) => impl { (t: DataType) => (s ->: t) ->: ArrayType(n, s) ->: ArrayType(n, t) } } }
    override def primEq(obj: rise.core.Primitive): Boolean = obj match {
      case p: Primitive =>
        p.dim == dim && true
      case _ =>
        false
    }
  }
  def unapply(arg: rise.core.Expr): Option[Int] = arg match {
    case p: Primitive =>
      Some(p.dim)
    case _ =>
      None
  }
}
