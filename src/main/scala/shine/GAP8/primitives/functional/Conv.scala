// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! //
// This file is automatically generated and should not be changed manually //
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! //
package shine.GAP8.primitives.functional
import arithexpr.arithmetic._
import shine.DPIA.Phrases._
import shine.DPIA.Types.DataType._
import shine.DPIA.Types._
import shine.DPIA.Types.Kind.{ Identifier => _, _ }
import shine.DPIA._
final case class Conv(fs: shine.GAP8.ConvolutionFilterSize)(val w: Nat, val h: Nat, val bias: Nat, val dt: DataType, val in: Phrase[ExpType], val filter: Phrase[ExpType]) extends ExpPrimitive {
  assert {
    in :: expT(ArrayType(h, ArrayType(w, dt)), read)
    filter :: expT(ArrayType(10, dt), read)
    true
  }
  override val t: ExpType = expT(ArrayType(h - 2, ArrayType(w - 2, dt)), write)
  override def visitAndRebuild(v: VisitAndRebuild.Visitor): Conv = new Conv(fs)(v.nat(w), v.nat(h), v.nat(bias), v.data(dt), VisitAndRebuild(in, v), VisitAndRebuild(filter, v))
  def unwrap: (Nat, Nat, Nat, DataType, Phrase[ExpType], Phrase[ExpType]) = (w, h, bias, dt, in, filter)
}
