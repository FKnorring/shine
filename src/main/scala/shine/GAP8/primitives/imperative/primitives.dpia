def kernelCallCmd{name: String, cores: Int, n: Int}
    (inTs: n*data, dt: data, args: n*exp[*inTs, read], output: acc[dt]): comm

def conv3x3(w: nat,
            h: nat,
            bias: nat,
            dt: data,
            in: exp[w.h.dt, read],
            filter: exp[10.dt, read],
            out: acc[(w-2).(h-2).dt]): comm

def conv5x5(w: nat,
            h: nat,
            bias: nat,
            dt: data,
            in: exp[w.h.dt, read],
            filter: exp[26.dt, read],
            out: acc[(w-4).(h-4).dt]): comm

def conv7x7(w: nat,
            h: nat,
            bias: nat,
            dt: data,
            in: exp[w.h.dt, read],
            filter: exp[56.dt, read],
            out: acc[(w-6).(h-6).dt]): comm

def conv7x4(w: nat,
            h: nat,
            bias: nat,
            dt: data,
            in: exp[w.h.dt, read],
            filter: exp[28.dt, read],
            out: acc[(w-6).(h-3).dt]): comm


//def dmaCopy{a: shine.GAP8.MemoryType}(dt: data): comm

def dmaCopy{tt: shine.GAP8.DMATransferType}(dt: data, src: exp[dt, read], dst: acc[dt]): comm
//def memoryAlloc{mt: shine.GAP8.MemoryType}(size: nat, dt: data): comm
def memoryAlloc{mt: shine.GAP8.MemoryType}(dt: data, f: var[dt] -> comm): comm

//def new(dt: data, f: var[dt] -> comm): comm
//def dmaCopy(a: shine.GAP8.MemoryType, dt: data): comm
//def dmaCopy(a: shine.GAP8.MemoryType, dt: data, output: acc[dt]): acc[dt]
//def dmaCopyToL1(dt: data, output: acc[dt]): acc[dt]
//def dmaCopyToL2(dt: data, output: acc[dt]): acc[dt]
