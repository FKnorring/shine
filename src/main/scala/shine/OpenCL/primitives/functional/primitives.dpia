def circularBuffer(a: address, n: nat, alloc: nat, sz: nat, dt1: data, dt2: data,
                   load: exp[dt1, read] -> exp[dt2, write],
                   input: exp[(n-1+sz).dt1, read]): exp[n.sz.dt2, read]

def depMap{level: shine.OpenCL.ParallelismLevel, dim: Int}
          (n: nat, ft1: nat2data, ft2: nat2data,
           f: (m: nat) -> exp[ft1(m), read] -> exp[ft2(m), write],
           array: exp[n..ft1, read]): exp[n..ft2, write]

def iterate(a: address, n: nat, m: nat, k: nat, dt: data,
            f: (l: nat) -> exp[(l*n).dt, read] -> exp[l.dt, write],
            array: exp[(m*(n^k)).dt, read]): exp[m.dt, write]

def kernelCall{name: String, localSize: shine.OpenCL.LocalSize, globalSize: shine.OpenCL.GlobalSize, n: Int}
               (inTs: n*data,
                outT: data,
                args: n*exp[*inTs, read]): exp[outT, write]

def map{level: shine.OpenCL.ParallelismLevel, dim: Int}
       (n: nat, dt1: data, dt2: data,
        f: exp[dt1, read] -> exp[dt2, write],
        array: exp[n.dt1, read]): exp[n.dt2, write]

def openCLFunctionCall{name: String, n: Int}
                       (inTs: n*data,
                        outT: data,
                        args: n*exp[*inTs, read]): exp[outT, write]

def reduceSeq{unroll: Boolean}
             (n: nat, a: address, dt1: data, dt2: data,
              f: exp[dt2, read] -> exp[dt1, read] -> exp[dt2, write],
              init: exp[dt2, write],
              array: exp[n.dt1, read]): exp[dt2, read]

def rotateValues(a: address, n: nat, sz: nat, dt: data,
                 wrt: exp[dt, read] -> exp[dt, write],
                 input: exp[(n-1+sz).dt, read]): exp[n.sz.dt, read]

def run{localSize: shine.OpenCL.LocalSize,
        globalSize: shine.OpenCL.GlobalSize}
        (dt: data, input: exp[dt, write]): exp[dt, write]

def toMem(a: address, dt: data, input: exp[dt, write]): exp[dt, read]
