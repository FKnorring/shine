// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! //
// This file is automatically generated and should not be changed manually //
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! //
package shine.cuda.primitives.imperative
import arithexpr.arithmetic._
import shine.DPIA.Phrases._
import shine.DPIA.Types.DataType._
import shine.DPIA.Types._
import rise.core.types.{ FunType => _, DepFunType => _, TypePlaceholder => _, TypeIdentifier => _, Type => _, _ }
import rise.core.types.DataType._
import rise.core.types.Kind.{ Identifier => _, _ }
import shine.DPIA._
final case class WmmaMMA(val m: Nat, val n: Nat, val k: Nat, val layoutA: MatrixLayout, val layoutB: MatrixLayout, val dt1: DataType, val dt2: DataType, val aMatrix: Phrase[ExpType], val bMatrix: Phrase[ExpType], val cMatrix: Phrase[ExpType], val resultMatrix: Phrase[AccType]) extends CommandPrimitive {
  assert {
    aMatrix :: expT(FragmentType(m, k, n, dt1, Fragment.AMatrix, layoutA), read)
    bMatrix :: expT(FragmentType(k, n, m, dt1, Fragment.BMatrix, layoutB), read)
    cMatrix :: expT(FragmentType(m, n, k, dt2, Fragment.Accumulator, MatrixLayout.None), read)
    resultMatrix :: accT(FragmentType(m, n, k, dt2, Fragment.Accumulator, MatrixLayout.None))
    true
  }
  override val t: CommType = comm
  override def visitAndRebuild(v: VisitAndRebuild.Visitor): WmmaMMA = new WmmaMMA(v.nat(m), v.nat(n), v.nat(k), layoutA, layoutB, v.data(dt1), v.data(dt2), VisitAndRebuild(aMatrix, v), VisitAndRebuild(bMatrix, v), VisitAndRebuild(cMatrix, v), VisitAndRebuild(resultMatrix, v))
}
