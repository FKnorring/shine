package rise

import apps.mm.mmNVIDIAWithParams
import arithexpr.arithmetic.{ArithExpr, PosInf, RangeAdd, RangeMul, RangeUnknown}
import rise.core._
import rise.core.types.{NatIdentifier, _}
import rise.core.primitives.{let => _, _}
import rise.core.DSL._
import rise.core.DSL.Type._
import rise.core.DSL.HighLevelConstructs.{slideVectors, tileShiftInwards}
import rise.openCL.DSL._
import apps.separableConvolution2D.weightsSeqVecUnroll
import shine.OpenCL.{GlobalSize, LocalSize}
import rise.autotune._
import rise.autotune.configFileGeneration.{distributeConstraints, check_no_cycle}


class autotuning extends test_util.Tests {
  val convolution: ToBeTyped[Expr] =
  // tileShiftInwards should constrain n >= tile
  // slideVectors and slide should constrain tile % vec = 0
    tuningParam("vec", RangeAdd(1, 32, 1), (vec: Nat) =>
      tuningParam("tile", RangeAdd(4, 32, 1), (tile: Nat) =>
        depFun(RangeAdd(1, PosInf, vec), (n: Nat) =>
          fun(3 `.` f32)(weights =>
            fun(((n + 2) `.` f32) ->: (n `.` f32))(input =>
              input |> tileShiftInwards(tile)(mapWorkGroup(0)(
                slideVectors(vec) >> slide(3)(vec) >>
                  mapLocal(0)(weightsSeqVecUnroll(weights)) >>
                  asScalar
              ))
            )))))

  val convolutionOcl: ToBeTyped[Expr] =
  // tileShiftInwards should constrain n >= tile
  // slideVectors and slide should constrain tile % vec = 0
    tuningParam("vec", RangeAdd(1, 32, 1), (vec: Nat) =>
      tuningParam("tile", RangeAdd(4, 32, 1), (tile: Nat) =>
        depFun(RangeAdd(1, PosInf, vec), (n: Nat) =>
          fun(3 `.` f32)(weights =>
            fun(((n + 2) `.` f32) ->: (n `.` f32))(input =>
              oclRun(LocalSize(1), GlobalSize(32))(
                input |> tileShiftInwards(tile)(mapWorkGroup(0)(
                  slideVectors(vec) >> slide(3)(vec) >>
                    mapLocal(0)(weightsSeqVecUnroll(weights)) >>
                    asScalar
                ))
              ))))))

  val convolutionOclGsLsWrap: Expr =
    tuningParam("ls0", (ls0: Nat) => tuningParam("ls1", (ls1: Nat) =>
      tuningParam("gs0", (gs0: Nat) => tuningParam("gs1", (gs1: Nat) =>
        wrapOclRun(LocalSize(ls0, ls1), GlobalSize(gs0, gs1))(convolution)
      ))))

  val convolutionOclGsLs: ToBeTyped[Expr] = {
    // tileShiftInwards should constrain n >= tile
    // slideVectors and slide should constrain tile % vec = 0
    tuningParam("ls0", RangeMul(1, 1024, 2), (ls0: Nat) =>
      tuningParam("ls1", RangeMul(1, 1024, 2), (ls1: Nat) =>
        tuningParam("gs0", RangeMul(1, 1024, 2), (gs0: Nat) =>
          tuningParam("gs1", RangeMul(1, 1024, 2), (gs1: Nat) =>
            tuningParam("vec", RangeAdd(1, 32, 1), (vec: Nat) =>
              tuningParam("tile", RangeAdd(4, 1024, 1), (tile: Nat) =>
                depFun(RangeAdd(1, PosInf, vec), (n: Nat) =>
                  fun(3 `.` f32)(weights =>
                    fun(((n + 2) `.` f32) ->: (n `.` f32))(input =>
                      oclRun(LocalSize(ls0, ls1), GlobalSize(gs0, gs1))(
                        input |> tileShiftInwards(tile)(mapWorkGroup(0)(
                          slideVectors(vec) >> slide(3)(vec) >>
                            mapLocal(0)(weightsSeqVecUnroll(weights)) >>
                            asScalar
                        ))
                      ))))))))))
  }

  val scalSJ: ToBeTyped[Expr] =
    depFun((n: Nat) => fun(n `.` f32)(input => fun(f32)(alpha =>
      oclRun(LocalSize(1), GlobalSize(32))(
        input |> split(4) |> mapGlobal(0)(fun(x => alpha * x)) |> join)
    )))

  val scalOcl: ToBeTyped[Expr] =
    depFun((n: Nat) => fun(n `.` f32)(input => fun(f32)(alpha =>
      oclRun(LocalSize(1), GlobalSize(32))(
        input |> mapGlobal(0)(fun(x => alpha * x)))
    )))

  val scal: ToBeTyped[Expr] =
    depFun((n: Nat) => fun(n `.` f32)(input => fun(f32)(alpha =>
      input |> mapGlobal(0)(fun(x => alpha * x)))
    ))

  // scalastyle:off
  val init: Int => String = (N) => {
    s"""
       |const int N = ${N};
       |
       |Buffer input = createBuffer(ctx, N * sizeof(float), HOST_READ | HOST_WRITE | DEVICE_READ);
       |Buffer output = createBuffer(ctx, N * sizeof(float), HOST_READ | HOST_WRITE | DEVICE_WRITE);
       |
       |float* in = hostBufferSync(ctx, input, N * sizeof(float), HOST_WRITE);
       |for (int i = 0; i < N; i++) {
       |  in[i] = 1;
       |}
       |
       |// synchronize before entering timed section
       |deviceBufferSync(ctx, input, N * sizeof(float), DEVICE_READ);
       |
       |""".stripMargin
  }

  val computeNoSizes =
    s"""
       |fun_run(ctx, &fun, output, input, input);
       |""".stripMargin

  val compute =
    s"""
       |fun_run(ctx, &fun, output, N, input, input);
       |""".stripMargin

  val finish =
    s"""
       |// TODO: could check output here
       |
       |destroyBuffer(ctx, input);
       |destroyBuffer(ctx, output);
       |""".stripMargin
  // scalastyle:on




  test("collect parameters") {
    val params = autotune.constraints.collectParameters(convolutionOclGsLsWrap)
    assert(params.find(IsTuningParameter("vec")).get.range == RangeAdd(1, 32, 1))
    assert(params.find(IsTuningParameter("tile")).get.range == RangeAdd(4, 32, 1))
    assert(params.find(IsTuningParameter("ls0")).get.range == RangeUnknown)
    assert(params.find(IsTuningParameter("ls1")).get.range == RangeUnknown)
    assert(params.find(IsTuningParameter("gs0")).get.range == RangeUnknown)
    assert(params.find(IsTuningParameter("gs1")).get.range == RangeUnknown)
    assert(params.size == 6)
  }

  test("collect constraints") {
    val e: Expr = convolutionOclGsLsWrap
    autotune.constraints.collectConstraints(e,
      autotune.constraints.collectParameters(e))
      .foreach(println)
  }

  test("substitute parameters") {
    val e: Expr = convolution(32)
    val constraints = autotune.constraints.collectConstraints(e,
      autotune.constraints.collectParameters(e))
    println("constraints: \n" + constraints)

    val badParameters1 = Map(
      TuningParameter("vec") -> (5: Nat),
      TuningParameter("tile") -> (15: Nat)
    )
    assert(!autotune.constraints.checkConstraints(constraints, badParameters1))

    val badParameters2 = Map(
      TuningParameter("vec") -> (4: Nat),
      TuningParameter("tile") -> (13: Nat)
    )
    assert(!autotune.constraints.checkConstraints(constraints, badParameters2))

    /* FIXME: there is no `n >= tile` constraint collected
    val badParameters3 = Map(
      TuningParameter("vec") -> (8: Nat),
      TuningParameter("tile") -> (64: Nat)
    )
    assert(!autotune.checkConstraints(constraints, badParameters3))
    */

    val goodParameters = Map(
      TuningParameter("vec") -> (4: Nat),
      TuningParameter("tile") -> (16: Nat)
    )
    assert(autotune.constraints.checkConstraints(constraints, goodParameters))
    rise.core.substitute.natsInExpr(goodParameters, e)
  }

  val mmKernel: ToBeTyped[Expr] =
          tuningParam("v3", RangeAdd(1,1024,1), (v3: Nat) =>
            tuningParam("v4", RangeAdd(1,1024,1), (v4: Nat) =>
              tuningParam("v5", RangeAdd(1,1024,1), (v5: Nat) =>
                tuningParam("v6", RangeAdd(1,1024,1), (v6: Nat) =>
                  tuningParam("v7", RangeAdd(1,1024,1), (v7: Nat) =>
                    tuningParam("v8", RangeAdd(1,1024,1), (v8: Nat) =>
                      mmNVIDIAWithParams(v3, v4, v5, v6, v7, v8)
                    ))))))

  test("mm kernel constraints") {
    val e: Expr =
      tuningParam("ls0", (ls0: Nat) => tuningParam("ls1", (ls1: Nat) =>
        tuningParam("gs0", (gs0: Nat) => tuningParam("gs1", (gs1: Nat) =>
          wrapOclRun(LocalSize(ls0, ls1), GlobalSize(gs0, gs1))(mmKernel)
        ))))
    val (nIdent, mIdent, oIdent) = e match {
      case DepLambda(NatKind, n: NatIdentifier, DepLambda(NatKind, m: NatIdentifier, DepLambda(NatKind, o: NatIdentifier, _))) =>
        (n, m, o)
      case _ => ???
    }

    val params = autotune.constraints.collectParameters(e)
    val constraints = autotune.constraints.collectConstraints(e, params)
    // note: v5 multiple of 4, contiguous memory constraint is missing

    // n, m, o, v3, v4, v5, v6, v7, v8, ls0, ls1, gs0, gs1
    val badParameters = Seq[(Nat, Nat, Nat, Nat, Nat, Nat, Nat, Nat, Nat, Nat, Nat, Nat, Nat)](
      (64, 128, 128, 8, 1, 1, 1, 16, 1, 32, 4, 32, 16),
      (64, 128, 128, 1, 1, 1, 32, 1, 128, 64, 2, 64, 128),
      (64, 128, 128, 2, 1, 1, 2, 32, 32, 1, 1, 4, 64),
      (64, 128, 128, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1),
      (64, 128, 128, 1, 1, 1, 1, 8, 4, 4, 1, 64, 1),
      (64, 128, 128, 1, 1, 1, 1, 1, 128, 2, 2, 2, 8),
      (64, 128, 128, 1, 1, 1, 2, 1, 2, 2, 2, 4, 128),
      (64, 128, 128, 2, 1, 1, 1, 2, 4, 4, 4, 16, 64),
      (64, 128, 128, 2, 1, 1, 2, 8, 2, 4, 2, 4, 2),
      (64, 128, 128, 8, 1, 1, 1, 8, 4, 8, 64, 8, 64),
      (64, 128, 128, 16, 2, 2, 1, 16, 2, 64, 4, 64, 8),
      (64, 128, 128, 1, 1, 2, 2, 128, 4, 16, 16, 64, 64),
      (64, 128, 128, 1, 1, 2, 4, 1, 16, 4, 1, 4, 32),
      (64, 128, 128, 1, 1, 2, 1, 4, 128, 4, 2, 64, 4),
      (64, 128, 128, 2, 1, 2, 4, 2, 64, 2, 1, 128, 1),
      (64, 128, 128, 16, 2, 2, 2, 32, 8, 2, 1, 128, 1),
      (64, 128, 128, 2, 2, 2, 2, 16, 8, 4, 1, 4, 32),
      (64, 128, 128, 1, 2, 2, 1, 1, 1, 4, 1, 4, 4),
      (64, 128, 128, 8, 2, 2, 1, 8, 32, 8, 2, 32, 2),
      (64, 128, 128, 32, 2, 2, 2, 64, 16, 1, 2, 16, 32),
      (64, 128, 128, 2, 4, 4, 16, 8, 64, 8, 1, 8, 8),
      (64, 128, 128, 1, 1, 4, 32, 8, 64, 2, 4, 128, 4),
      (64, 128, 128, 1, 2, 4, 4, 1, 1, 16, 1, 16, 1),
      (64, 128, 128, 1, 2, 4, 128, 8, 128, 2, 1, 2, 32),
      (64, 128, 128, 1, 1, 4, 16, 16, 32, 1, 128, 32, 128),
      (64, 128, 128, 1, 1, 4, 32, 8, 8, 16, 8, 64, 8),
      (64, 128, 128, 2, 1, 4, 64, 8, 32, 2, 8, 4, 64),
      (64, 128, 128, 4, 1, 4, 2, 32, 2, 4, 8, 8, 64),
      (64, 128, 128, 2, 1, 8, 2, 4, 128, 2, 2, 2, 16),
      (64, 128, 128, 1, 4, 8, 8, 2, 16, 4, 2, 8, 4),
      (64, 128, 128, 2, 8, 8, 8, 128, 2, 2, 1, 4, 2),
      (64, 128, 128, 1, 4, 8, 16, 4, 4, 1, 2, 128, 2),
      (64, 128, 128, 1, 1, 8, 1, 4, 1, 1, 16, 1, 32),
      (64, 128, 128, 2, 8, 8, 8, 8, 1, 8, 4, 8, 16),
      (64, 128, 128, 2, 1, 16, 16, 8, 32, 1, 2, 1, 128),
      (64, 128, 128, 2, 2, 16, 4, 2, 4, 2, 1, 128, 2),
      (64, 128, 128, 2, 1, 16, 16, 8, 8, 16, 2, 16, 2),
      (64, 128, 128, 1, 4, 16, 32, 8, 128, 1, 1, 2, 8),
      (64, 128, 128, 1, 4, 16, 128, 32, 32, 1, 4, 1, 16),
      (64, 128, 128, 1, 1, 16, 4, 1, 1, 1, 4, 32, 32),
      (64, 128, 128, 2, 1, 32, 1, 4, 8, 8, 2, 128, 2),
      (64, 128, 128, 1, 4, 32, 1, 4, 64, 1, 8, 1, 8),
      (64, 128, 128, 1, 1, 32, 2, 1, 8, 8, 1, 64, 1),
      (64, 128, 128, 1, 8, 32, 32, 1, 64, 1, 1, 1, 64),
      (64, 128, 128, 1, 32, 32, 16, 64, 32, 1, 1, 8, 16),
      (64, 128, 128, 2, 32, 32, 4, 4, 2, 16, 8, 32, 64),
      (64, 128, 128, 32, 8, 32, 2, 32, 1, 2, 8, 2, 8),
      (64, 128, 128, 2, 8, 64, 4, 4, 64, 1, 8, 1, 32),
      (64, 128, 128, 2, 1, 64, 16, 2, 4, 1, 1, 4, 64),
      (64, 128, 128, 1, 4, 64, 8, 1, 128, 1, 2, 16, 4),
      (64, 128, 128, 2, 16, 64, 2, 2, 8, 2, 2, 2, 2),
      (64, 128, 128, 1, 8, 64, 1, 1, 1, 1, 1, 1, 2),
      (64, 128, 128, 1, 1, 64, 1, 2, 8, 32, 64, 64, 128),
      (64, 128, 128, 1, 64, 64, 64, 1, 4, 1, 2, 1, 16),
      (64, 128, 128, 2, 64, 64, 4, 2, 1, 2, 8, 2, 32),
      (64, 128, 128, 64, 32, 64, 1, 64, 64, 32, 1, 128, 64),
      (64, 128, 128, 32, 32, 128, 1, 64, 4, 64, 1, 64, 1),
      (64, 128, 128, 4, 2, 128, 32, 4, 8, 1, 1, 8, 4),
      (64, 128, 128, 4, 128, 128, 1, 4, 32, 2, 16, 2, 64),
      (64, 128, 128, 1, 8, 128, 128, 1, 32, 2, 2, 4, 16),
      (64, 128, 128, 1, 32, 128, 2, 1, 128, 4, 1, 64, 8),
      (64, 128, 128, 1, 8, 128, 8, 4, 128, 4, 8, 8, 16),
      (64, 128, 128, 8, 128, 128, 128, 16, 16, 8, 64, 16, 64),
      (64, 128, 128, 16, 64, 128, 1, 128, 128, 1, 2, 1, 4),
      (64, 128, 128, 16, 128, 128, 8, 32, 8, 1, 2, 1, 2),
      (64, 128, 128, 2, 1, 1, 8, 4, 16, 2, 2, 2, 2),
    )
    val goodParameters = Seq[(Nat, Nat, Nat, Nat, Nat, Nat, Nat, Nat, Nat, Nat, Nat, Nat, Nat)](
      (64, 128, 128, 4, 1, 1, 4, 4, 8, 8, 4, 8, 32),
      (64, 128, 128, 4, 1, 1, 8, 64, 16, 1, 16, 4, 32),
      (64, 128, 128, 4, 1, 1, 8, 128, 64, 1, 8, 8, 8),
      (64, 128, 128, 4, 1, 2, 4, 64, 128, 4, 2, 4, 4),
      (64, 128, 128, 64, 2, 2, 32, 64, 32, 1, 1, 2, 32),
      (64, 128, 128, 4, 1, 2, 8, 8, 64, 32, 2, 32, 16),
      (64, 128, 128, 4, 1, 2, 32, 4, 32, 4, 4, 4, 4),
    )
    for ((params, isGood) <- Seq((badParameters, false), (goodParameters, true))) {
      params.foreach { case cfg@(n, m, o, v3, v4, v5, v6, v7, v8, ls0, ls1, gs0, gs1) =>
        val map = Map(
          nIdent -> n,
          mIdent -> m,
          oIdent -> o,
          TuningParameter("v3") -> v3,
          TuningParameter("v4") -> v4,
          TuningParameter("v5") -> v5,
          TuningParameter("v6") -> v6,
          TuningParameter("v7") -> v7,
          TuningParameter("v8") -> v8,
          TuningParameter("ls0") -> ls0,
          TuningParameter("ls1") -> ls1,
          TuningParameter("gs0") -> gs0,
          TuningParameter("gs1") -> gs1,
        )
        if (autotune.constraints.checkConstraints(constraints, map) != isGood) {
          val (sat, notSat) = constraints.partition(c =>
            c.substitute(map.asInstanceOf[Map[ArithExpr, ArithExpr]]).isSatisfied())
          println("satisfied:")
          sat.foreach(println)
          println("not satisfied:")
          notSat.foreach(println)
          throw new Exception(s"$cfg should${if (isGood) "" else " not"} pass constraint checking")
        }
      }
    }
  }

  test("generateJSON mm"){

    // scalastyle:off
    val gold =
      """{
        | "application_name" : "RISE",
        | "optimization_objectives" : ["runtime"],
        | "hypermapper_mode" : {
        |   "mode" : "client-server"
        | },
        | "feasible_output" : {
        |   "enable_feasible_predictor" : true,
        |   "name" : "Valid",
        |   "true_value" : "True",
        |   "false_value" : "False"
        | },
        | "design_of_experiment" : {
        |   "doe_type" : "random sampling",
        |   "number_of_samples" : 100
        | },
        | "optimization_iterations" : 100,
        | "input_parameters" : {
        |   "tuned_v7" : {
        |       "parameter_type" : "ordinal",
        |       "values" : [4, 8, 16, 32, 64, 128, 256, 512, 1024]
        |   },
        |   "tuned_v8" : {
        |       "parameter_type" : "ordinal",
        |       "values" : [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]
        |   },
        |   "tuned_gs0" : {
        |       "parameter_type" : "ordinal",
        |       "values" : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024]
        |   },
        |   "tuned_gs1" : {
        |       "parameter_type" : "ordinal",
        |       "values" : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024]
        |   },
        |   "tuned_v3" : {
        |       "parameter_type" : "ordinal",
        |       "values" : [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 272, 276, 280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328, 332, 336, 340, 344, 348, 352, 356, 360, 364, 368, 372, 376, 380, 384, 388, 392, 396, 400, 404, 408, 412, 416, 420, 424, 428, 432, 436, 440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488, 492, 496, 500, 504, 508, 512, 516, 520, 524, 528, 532, 536, 540, 544, 548, 552, 556, 560, 564, 568, 572, 576, 580, 584, 588, 592, 596, 600, 604, 608, 612, 616, 620, 624, 628, 632, 636, 640, 644, 648, 652, 656, 660, 664, 668, 672, 676, 680, 684, 688, 692, 696, 700, 704, 708, 712, 716, 720, 724, 728, 732, 736, 740, 744, 748, 752, 756, 760, 764, 768, 772, 776, 780, 784, 788, 792, 796, 800, 804, 808, 812, 816, 820, 824, 828, 832, 836, 840, 844, 848, 852, 856, 860, 864, 868, 872, 876, 880, 884, 888, 892, 896, 900, 904, 908, 912, 916, 920, 924, 928, 932, 936, 940, 944, 948, 952, 956, 960, 964, 968, 972, 976, 980, 984, 988, 992, 996, 1000, 1004, 1008, 1012, 1016, 1020, 1024]
        |   },
        |   "tuned_v4" : {
        |       "parameter_type" : "ordinal",
        |       "values" : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024]
        |   },
        |   "tuned_v5" : {
        |       "parameter_type" : "ordinal",
        |       "values" : [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]
        |   },
        |   "tuned_ls0" : {
        |       "parameter_type" : "ordinal",
        |       "values" : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024]
        |   },
        |   "tuned_v6" : {
        |       "parameter_type" : "ordinal",
        |       "values" : [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 272, 276, 280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328, 332, 336, 340, 344, 348, 352, 356, 360, 364, 368, 372, 376, 380, 384, 388, 392, 396, 400, 404, 408, 412, 416, 420, 424, 428, 432, 436, 440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488, 492, 496, 500, 504, 508, 512, 516, 520, 524, 528, 532, 536, 540, 544, 548, 552, 556, 560, 564, 568, 572, 576, 580, 584, 588, 592, 596, 600, 604, 608, 612, 616, 620, 624, 628, 632, 636, 640, 644, 648, 652, 656, 660, 664, 668, 672, 676, 680, 684, 688, 692, 696, 700, 704, 708, 712, 716, 720, 724, 728, 732, 736, 740, 744, 748, 752, 756, 760, 764, 768, 772, 776, 780, 784, 788, 792, 796, 800, 804, 808, 812, 816, 820, 824, 828, 832, 836, 840, 844, 848, 852, 856, 860, 864, 868, 872, 876, 880, 884, 888, 892, 896, 900, 904, 908, 912, 916, 920, 924, 928, 932, 936, 940, 944, 948, 952, 956, 960, 964, 968, 972, 976, 980, 984, 988, 992, 996, 1000, 1004, 1008, 1012, 1016, 1020, 1024]
        |   },
        |   "tuned_ls1" : {
        |       "parameter_type" : "ordinal",
        |       "values" : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024]
        |   }
        | }
        |}
        |""".stripMargin
    // scalastyle:on

    val e: Expr =
      tuningParam("ls0", RangeAdd(1, 1024, 1), (ls0: Nat) =>
        tuningParam("ls1", RangeAdd(1, 1024, 1), (ls1: Nat) =>
          tuningParam("gs0", RangeAdd(1, 1024, 1), (gs0: Nat) =>
            tuningParam("gs1", RangeAdd(1, 1024, 1), (gs1: Nat) =>
              wrapOclRun(LocalSize(ls0, ls1), GlobalSize(gs0, gs1))(mmKernel)
            ))))

    // todo find a generic solution?
    val (nIdent, mIdent, oIdent) = e match {
      case DepLambda(NatKind, n: NatIdentifier, DepLambda(NatKind, m: NatIdentifier, DepLambda(NatKind, o: NatIdentifier, _))) => (n, m, o)
      case _ => ???
    }

    val m:Nat = 1024
    val n:Nat = 1024
    val o:Nat = 1024
    val map = Map(nIdent -> n, mIdent -> m, oIdent -> o)

    val parameters = autotune.constraints.collectParameters(e)
    val constraints = autotune.constraints.collectConstraints(e, parameters)
    val constraintsSubstituted = constraints.map(constraint => constraint.substitute(map.asInstanceOf[Map[ArithExpr, ArithExpr]]))

    val dc = distributeConstraints(parameters, constraintsSubstituted)

    var size = 0
    dc.foreach(elem => {
      size += elem._2._1.size
    })

    val tuner = Tuner(
      hostCode = HostCode(init(32), compute, finish),
      samples = 100,
      name = "RISE",
      output = "autotuning",
      timeouts =Timeouts(5000, 5000, 5000),
      executionIterations = 10,
      speedupFactor = 100,
      configFile = None,
      hierarchicalHM = false
    )
    val json = autotune.configFileGeneration.generateJSON(parameters, constraintsSubstituted, tuner)

    assert(json.equals(gold))
  }

  test("generateJSON conv") {
    val e:Expr = convolution

    val nIdent = e match {
      case DepLambda(NatKind, n: NatIdentifier, _) => n
      case _ => ???
    }

    val n:Nat = 32
    val map = Map(nIdent -> n)

    val parameters = autotune.constraints.collectParameters(e)
    val constraints = autotune.constraints.collectConstraints(e, parameters)
    val constraintsSubstituted = constraints.map(constraint => constraint.substitute(map.asInstanceOf[Map[ArithExpr, ArithExpr]]))

    val tuner = Tuner(
      hostCode = HostCode(init(32), compute, finish),
      inputSizes = Seq(32),
      samples = 100,
      name = "RISE",
      output = "autotuning",
      timeouts =Timeouts(5000, 5000, 5000),
      executionIterations = 10,
      speedupFactor = 100,
      configFile = None,
      hierarchicalHM = false
    )

    val json = autotune.configFileGeneration.generateJSON(parameters, constraintsSubstituted, tuner)

    // scalastyle:off
    val gold =
      """{
        | "application_name" : "RISE",
        | "optimization_objectives" : ["runtime"],
        | "hypermapper_mode" : {
        |   "mode" : "client-server"
        | },
        | "feasible_output" : {
        |   "enable_feasible_predictor" : true,
        |   "name" : "Valid",
        |   "true_value" : "True",
        |   "false_value" : "False"
        | },
        | "design_of_experiment" : {
        |   "doe_type" : "random sampling",
        |   "number_of_samples" : 20
        | },
        | "optimization_iterations" : 100,
        | "input_parameters" : {
        |   "tuned_tile" : {
        |       "parameter_type" : "ordinal",
        |       "values" : [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
        |   },
        |   "tuned_vec" : {
        |       "parameter_type" : "ordinal",
        |       "values" : [2, 4, 8, 16]
        |   }
        | }
        |}
        |""".stripMargin
    // scalastyle:on

    assert(json.equals(gold))
  }

  test("wrapOclRun") {
    val wrapped = wrapOclRun(LocalSize(1), GlobalSize(32))(convolution)
    assert(convolutionOcl.toExpr =~= wrapped)

    val e = (wrapped: ToBeTyped[Expr]) (32)
    assert(convolutionOcl(32).toExpr =~= e.toExpr)
  }


  test("search") {
    // test full tuning run
    val e: Expr = convolutionOcl

    val tuner = Tuner(
      hostCode = HostCode(init(32), compute, finish),
      inputSizes = Seq(32)
    )

    val tuningResult = autotune.search(tuner)(e)

    println("tuningResult: \n")
    tuningResult.samples.foreach(elem => println(elem))

    val bestSample = autotune.getBest(tuningResult.samples)
    println("bestSample: \n" + bestSample)

    autotune.saveSamples("autotuning/RISE.csv", tuningResult)
  }

  // test Hypermapper constraints support
  // needs access to hypermapper_dev repository
  ignore("search experimental") {
    val e: Expr = convolutionOclGsLs(1024)

    val tuner = Tuner(
      hostCode = HostCode(init(1024), computeNoSizes, finish),
      samples = 100,
      name = "RISE",
      output = "autotuning",
      timeouts =Timeouts(5000, 5000, 5000),
      executionIterations = 10,
      speedupFactor = 100,
      configFile = None,
      hierarchicalHM = true
    )

    val tuningResult = autotune.search(tuner)(e)

    println("tuningResult: \n")
    tuningResult.samples.foreach(elem => println(elem))

    val bestSample = autotune.getBest(tuningResult.samples)
    println("bestSample: \n" + bestSample)

    autotune.saveSamples("autotuning/RISE.csv", tuningResult)
  }

  test("distribute constraints") {
    val e: Expr = convolutionOclGsLs(1024)
    val params = autotune.constraints.collectParameters(e)
    val constraints = autotune.constraints.collectConstraints(e, params)

    val paramsSorted = params.toSeq.sortBy(_.name)
    val gs0 = paramsSorted(0)
    val gs1 = paramsSorted(1)
    val ls0 = paramsSorted(2)
    val ls1 = paramsSorted(3)
    val tile = paramsSorted(4)
    val vec = paramsSorted(5)

    val constraintsSorted = constraints.toSeq.sortBy(_.toString)

    val gold = Map(
      gs0 -> (Set(constraintsSorted(3), constraintsSorted(4)), Set(ls0)),
      gs1 -> (Set(constraintsSorted(5), constraintsSorted(6)), Set(ls1)),
      ls0 -> (Set(constraintsSorted(7)), Set.empty[NatIdentifier]),
      ls1 -> (Set(constraintsSorted(8)), Set.empty[NatIdentifier]),
      tile -> (Set(constraintsSorted(0), constraintsSorted(1), constraintsSorted(9)), Set(vec)),
      vec -> (Set(constraintsSorted(10), constraintsSorted(11)), Set.empty[NatIdentifier])
    )

    val distribution = autotune.configFileGeneration.distributeConstraints(params, constraints)

    // check if distribution contains cycle
    assert(check_no_cycle(distribution))

    // check distribution against gold (which distribution to expect)
    println("\ndistribution: " )
    distribution.foreach(println)

    println("\ngold: " )
    gold.foreach(println)

    var size = 0
    distribution.foreach(elem => {
      size += elem._2._1.size
      assert(gold.apply(elem._1)._1.equals(elem._2._1))
      assert(gold.apply(elem._1)._2.equals(elem._2._2))
    })

    // we drop one constraint, which is static
    assert(size.equals(constraintsSorted.size-1))

  }

  test("test cycle checker"){

    val emptyConstraints = Set.empty[constraints.Constraint]

    val A = NatIdentifier("A")
    val B = NatIdentifier("B")
    val C = NatIdentifier("C")

    // create example with no cycle
    val distributionNoCycle = scala.collection.mutable.Map[NatIdentifier,
      (Set[constraints.Constraint], Set[NatIdentifier])]()
    val dependenciesNoCycleA = Set(B)
    val dependenciesNoCycleB = Set.empty[NatIdentifier]
    val dependenciesNoCycleC = Set(A)

    distributionNoCycle(A) = (emptyConstraints, dependenciesNoCycleA)
    distributionNoCycle(B) = (emptyConstraints, dependenciesNoCycleB)
    distributionNoCycle(C) = (emptyConstraints, dependenciesNoCycleC)

    assert(check_no_cycle(distributionNoCycle.toMap))

    // create example with cycle
    val distributionCycle = scala.collection.mutable.Map[NatIdentifier,
      (Set[constraints.Constraint], Set[NatIdentifier])]()
    val dependenciesCycleA = Set(B)
    val dependenciesCycleB = Set(A)
    val dependenciesCycleC = Set.empty[NatIdentifier]

    distributionCycle(A) = (emptyConstraints, dependenciesCycleA)
    distributionCycle(B) = (emptyConstraints, dependenciesCycleB)
    distributionCycle(C) = (emptyConstraints, dependenciesCycleC)

    assert(!check_no_cycle(distributionCycle.toMap))

    // create another example with cycle
    val distributionCycle2 = scala.collection.mutable.Map[NatIdentifier,
      (Set[constraints.Constraint], Set[NatIdentifier])]()
    val dependenciesCycle2A = Set(B)
    val dependenciesCycle2B = Set(B)
    val dependenciesCycle2C = Set.empty[NatIdentifier]

    distributionCycle2(A) = (emptyConstraints, dependenciesCycle2A)
    distributionCycle2(B) = (emptyConstraints, dependenciesCycle2B)
    distributionCycle2(C) = (emptyConstraints, dependenciesCycle2C)

    assert(!check_no_cycle(distributionCycle2.toMap))

  }

  test("execute convolution") {
    val goodParameters = Map(
      TuningParameter("vec") -> (4: Nat),
      TuningParameter("tile") -> (16: Nat)
    )

    val e: Expr = convolutionOcl(32)
    val e2 = rise.core.substitute.natsInExpr(goodParameters, e)

    val result = autotune.execution.execute(
      expression = e2,
      hostCode = HostCode(init(32), computeNoSizes, finish),
      timeouts = Timeouts(5000, 5000, 5000),
      executionIterations = 10,
      speedupFactor = 100,
      execution = Median)

//     check if result has valid runtime
    assert(result.runtime.isDefined)
//     check if no error was reported
    assert(result.error.errorLevel.equals(autotune.NO_ERROR))
//
    println("result: " + result)
  }

  test("execute scal") {
    val e: Expr = scalOcl(1024)

    // scalastyle:off
    val init: Int => String = (N) => {
      s"""
         |const int N = ${N};
         |
         |Buffer input = createBuffer(ctx, N * sizeof(float), HOST_READ | HOST_WRITE | DEVICE_READ);
         |Buffer output = createBuffer(ctx, N * sizeof(float), HOST_READ | HOST_WRITE | DEVICE_WRITE);
         |
         |float* in = hostBufferSync(ctx, input, N * sizeof(float), HOST_WRITE);
         |for (int i = 0; i < N; i++) {
         |  in[i] = 1;
         |}
         |
         |// synchronize before entering timed section
         |deviceBufferSync(ctx, input, N * sizeof(float), DEVICE_READ);
         |
         |""".stripMargin
    }

    val compute =
      s"""
         |fun_run(ctx, &fun, output, input, 4);
         |""".stripMargin

    val finish =
      s"""
         |  float* out = hostBufferSync(ctx, output, N * sizeof(float), HOST_READ);
         |         |  for (int i = 0; i < N; i++) {
         |    if (out[i] != 4) {
         |       exit(EXIT_FAILURE);
         |    }
         |  }
         |
         |destroyBuffer(ctx, input);
         |destroyBuffer(ctx, output);
         |""".stripMargin
    // scalastyle:on

    val result = autotune.execution.execute(
      expression = e,
      hostCode = HostCode(init(1024), compute, finish),
      timeouts = Timeouts(5000, 5000, 5000),
      executionIterations = 10,
      speedupFactor = 100,
      execution = Minimum)

    // check if result has valid runtime
    assert(result.runtime.isDefined)
    // check if no error was reported
    assert(result.error.errorLevel == autotune.NO_ERROR)

    println("result: \n" + result)
  }

  test("test xml parsing") {

    // scalastyle:off
    val xmlString =
      """
<trace date="2021-03-30 18:04:26" profiler_version="0.1.0" ocl_version="1.2">
  <device name="GeForce RTX 2070" id="1"/>
  <queue properties="CL_QUEUE_PROFILING_ENABLE" device_id="1" id="1"/>
  <program build_options="-cl-fast-relaxed-math -Werror -cl-std=CL1.2" id="1"/>
  <kernel name="k0" program_id="1" id="1"/>
  <kernel_instance kernel_id="1" id="1" unique_id="1" command_queue_id="1">
    <event forced="true" queued="1617120266695090400" submit="1617120266695092832" start="1617120266695097344" end="1617120266695107456"/>
    <offset_range/>
    <global_range dim="3" x="1" y="1" z="1"/>
    <local_range dim="3" x="1" y="1" z="1"/>
  </kernel_instance>
  <mem_object type="Buffer" flag="CL_MEM_WRITE_ONLY|CL_MEM_ALLOC_HOST_PTR" size="128" id="2"/>
  <mem_object type="Buffer" flag="CL_MEM_READ_ONLY|CL_MEM_ALLOC_HOST_PTR" size="128" id="1"/>
</trace>
    """
    // scalastyle:on
    assert(autotune.execution.getRuntimeFromClap(xmlString)(0).value.toFloat == 0.010112f)
  }

  test("text xml parsing with corrupted xml string") {
    // scalastyle:off
    val corruptedXmlString =
      """<trace date="2021-04-01 18:42:51" profiler_version="0.1.0" ocl_version="1.2"/>
<trace date="2021-04-01 18:42:51" profiler_version="0.1.0" ocl_version="1.2">
  <device name="pthread-Intel(R) Core(TM) i5-8265U CPU @ 1.60GHz" id="1"/>
  <queue properties="CL_QUEUE_PROFILING_ENABLE" device_id="1" id="1"/>
  <program build_options="-cl-fast-relaxed-math -Werror -cl-std=CL1.2" id="1"/>
  <kernel name="k0" program_id="1" id="1"/>
  <kernel_instance kernel_id="1" id="1" unique_id="1" command_queue_id="1">
    <event forced="true" queued="42573479270519" submit="42573479270669" start="42573583785589" end="42573583944408"/>
    <offset_range/>
    <global_range dim="3" x="32" y="1" z="1"/>
    <local_range dim="3" x="1" y="1" z="1"/>
  </kernel_instance>
  <mem_object type="Buffer" flag="CL_MEM_WRITE_ONLY|CL_MEM_ALLOC_HOST_PTR" size="128" id="2"/>
  <mem_object type="Buffer" flag="CL_MEM_READ_ONLY|CL_MEM_ALLOC_HOST_PTR" size="128" id="1"/>
</trace>
    """
    // scalastyle:on
    assert(autotune.execution.getRuntimeFromClap(corruptedXmlString)(0).value.toFloat == 0.158819f)
  }

  test("test xml parsing for multiple runtimes"){
    // scalastyle:off
    val xmlString =
      """<trace date="2021-07-12 19:22:15" profiler_version="0.1.0" ocl_version="1.2">
        <device name="NVIDIA GeForce RTX 2070" id="1"/>
        <queue properties="CL_QUEUE_PROFILING_ENABLE" device_id="1" id="1"/>
        <program build_options="-cl-fast-relaxed-math -Werror -cl-std=CL1.2" id="1"/>
        <kernel name="k0" program_id="1" id="1"/>
        <kernel_instance kernel_id="1" id="1" unique_id="1" command_queue_id="1">
          <event forced="true" queued="1626110536128169248" submit="1626110536128172352" start="1626110536128271232" end="1626110536132397760"/>
          <offset_range/>
          <global_range dim="3" x="8192" y="1024" z="1"/>
          <local_range dim="3" x="16" y="8" z="1"/>
        </kernel_instance>
        <kernel_instance kernel_id="1" id="2" unique_id="2" command_queue_id="1">
          <event forced="true" queued="1626110536132419072" submit="1626110536132421024" start="1626110536132424704" end="1626110536136711168"/>
          <offset_range/>
          <global_range dim="3" x="8192" y="1024" z="1"/>
          <local_range dim="3" x="16" y="8" z="1"/>
        </kernel_instance>
        <kernel_instance kernel_id="1" id="3" unique_id="3" command_queue_id="1">
          <event forced="true" queued="1626110536136718592" submit="1626110536136720448" start="1626110536136944000" end="1626110536140495232"/>
          <offset_range/>
          <global_range dim="3" x="8192" y="1024" z="1"/>
          <local_range dim="3" x="16" y="8" z="1"/>
        </kernel_instance>
        <kernel_instance kernel_id="1" id="4" unique_id="4" command_queue_id="1">
          <event forced="true" queued="1626110536140501856" submit="1626110536140503712" start="1626110536140507840" end="1626110536144057344"/>
          <offset_range/>
          <global_range dim="3" x="8192" y="1024" z="1"/>
          <local_range dim="3" x="16" y="8" z="1"/>
        </kernel_instance>
        <kernel_instance kernel_id="1" id="5" unique_id="5" command_queue_id="1">
          <event forced="true" queued="1626110536144064256" submit="1626110536144066080" start="1626110536144069632" end="1626110536147620736"/>
          <offset_range/>
          <global_range dim="3" x="8192" y="1024" z="1"/>
          <local_range dim="3" x="16" y="8" z="1"/>
        </kernel_instance>
        <kernel_instance kernel_id="1" id="6" unique_id="6" command_queue_id="1">
          <event forced="true" queued="1626110536147629792" submit="1626110536147632224" start="1626110536148222976" end="1626110536152535744"/>
          <offset_range/>
          <global_range dim="3" x="8192" y="1024" z="1"/>
          <local_range dim="3" x="16" y="8" z="1"/>
        </kernel_instance>
        <kernel_instance kernel_id="1" id="7" unique_id="7" command_queue_id="1">
          <event forced="true" queued="1626110536152542432" submit="1626110536152544736" start="1626110536152768672" end="1626110536156320768"/>
          <offset_range/>
          <global_range dim="3" x="8192" y="1024" z="1"/>
          <local_range dim="3" x="16" y="8" z="1"/>
        </kernel_instance>
        <kernel_instance kernel_id="1" id="8" unique_id="8" command_queue_id="1">
          <event forced="true" queued="1626110536156329088" submit="1626110536156331584" start="1626110536156336288" end="1626110536160467648"/>
          <offset_range/>
          <global_range dim="3" x="8192" y="1024" z="1"/>
          <local_range dim="3" x="16" y="8" z="1"/>
        </kernel_instance>
        <kernel_instance kernel_id="1" id="9" unique_id="9" command_queue_id="1">
          <event forced="true" queued="1626110536160474304" submit="1626110536160476608" start="1626110536161701984" end="1626110536165956064"/>
          <offset_range/>
          <global_range dim="3" x="8192" y="1024" z="1"/>
          <local_range dim="3" x="16" y="8" z="1"/>
        </kernel_instance>
        <kernel_instance kernel_id="1" id="10" unique_id="10" command_queue_id="1">
          <event forced="true" queued="1626110536165962976" submit="1626110536165965248" start="1626110536165970848" end="1626110536170273792"/>
          <offset_range/>
          <global_range dim="3" x="8192" y="1024" z="1"/>
          <local_range dim="3" x="16" y="8" z="1"/>
        </kernel_instance>
        <mem_object type="Buffer" flag="CL_MEM_READ_ONLY|CL_MEM_ALLOC_HOST_PTR" size="268435456" id="1"/>
        <mem_object type="Buffer" flag="CL_MEM_READ_ONLY|CL_MEM_ALLOC_HOST_PTR" size="68" id="2"/>
        <mem_object type="Buffer" flag="CL_MEM_WRITE_ONLY|CL_MEM_ALLOC_HOST_PTR" size="268435456" id="3"/>
      </trace>
      """

    // scalastyle:on

    val gold = Seq(4.126528, 4.286464, 3.551232, 3.549504, 3.551104, 4.312768, 3.552096, 4.13136, 4.25408, 4.302944)
    val runtimes = autotune.execution.getRuntimeFromClap(xmlString)

    assert(runtimes.map(elem => elem.value) == gold)
  }

  test("generate huge amount of code") {
    // expression
    val e: Expr = convolutionOclGsLs(1024)

    // define parameters to break the code-gen
    val parameters = Map(
      TuningParameter("vec") -> (16: Nat),
      TuningParameter("tile") -> (32: Nat),
      TuningParameter("gs0") -> (1: Nat),
      TuningParameter("gs1") -> (512: Nat),
      TuningParameter("ls0") -> (1: Nat),
      TuningParameter("ls1") -> (64: Nat)
    )

    // substitute parameters
    val eWithParams = rise.core.substitute.natsInExpr(parameters, e)

    println("run codegen with timeout ")
    // WARNING: timeout does not stop the thread, it only returns to the host thread
    val result = autotune.execution.execute(
      eWithParams,
      HostCode(init(1024), computeNoSizes, finish),
      Timeouts(5000, 5000, 5000),
      10,
      100,
      execution = Median
    )

    print("result: " + result)
    assert(result.error.errorLevel.equals(autotune.CODE_GENERATION_ERROR))
  }
}
